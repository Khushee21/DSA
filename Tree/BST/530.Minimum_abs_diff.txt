Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.

 

Example 1:


Input: root = [4,2,6,1,3]
Output: 1
Example 2:


Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 104].
0 <= Node.val <= 105


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


SOLUTION


class Solution {
    public int getMinimumDifference(TreeNode root)  {
        List<Integer> list=new ArrayList<>();
        helper(list , root);
        int diff=Integer.MAX_VALUE;
        for(int i=0 ;i<list.size()-1 ;i++){
            diff =Math.min(diff , list.get(i+1)-list.get(i));
        }

        return diff;
    }
    public void helper(List<Integer> list , TreeNode root){
        if(root!=null){
            helper(list , root.left);
            list.add(root.val);
            helper(list , root.right);
        }
    } 
}