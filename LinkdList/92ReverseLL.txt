https://leetcode.com/problems/reverse-linked-list-ii


Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 
-------------------------------------------------------------------------------------------------------------------------------
here we have to reverse the linked list according to given left and right pointer
this problem is basically type of reverse linked list

 public ListNode reverseBetween(ListNode head, int left, int right) {

    if(head==null || left==right) return head;

    LinkList list= new ListList(0);
    list.next=head;
    ListNode prev=list;

    for(int i=0 ;i<left-1 ;i++){
        prev=preb.next;
    }
    ListNode curr=prev.next;

    for(int i=0 ;i<right-left ;i++){
        ListNode temp= curr.next;
        curr.next=temp.next;
        temp.next=prev.next;
        prev.next=temp;
    }
  return list.next;
 }