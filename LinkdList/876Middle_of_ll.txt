https://leetcode.com/problems/middle-of-the-linked-list/



Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 
Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100


-----------------------------------------------------------------------------------------------------------------------------------------

so is problem me we have to find middle first and return the second half list
kese krege??



##agar middle diya h to simple h 2 pointer approch pr jao(slow , fast)

while(fast!=null || fast.next!=null){
    slow=slow.next;
    fast=fast.next.next;
    if(fast==slow) return slow;
}
return null;