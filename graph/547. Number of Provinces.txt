There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2
Example 2:


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
 

Constraints:

1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] is 1 or 0.
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]


---------------------------------------------------------------------------------------------------------------------------------

problem ko dekhti hi 1st throught - DFS ya BFS 
good thing is ki we solve this by both

now kese process kre solution ko?

from the statement we have to focus on index where value is 1 so, kya in values ko kahi or store kr le 

jab tak visited false h mtlb we have more nodes , count them 


-----------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int findCircleNum(int[][] isConnected) {
        int n=isConnected.length;
        boolean vis[]=new boolean[n];

        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0 ;i<n ;i++){
            for(int j=0 ;j<n;j++){
                if(isConnected[i][j] ==1 && i!=j){
                    adj.get(i).add(j);
                }
            }
        }
        int count=0;
        for(int i=0 ;i<n ;i++){
            if(!vis[i]){
                count++;
                bfs(adj , vis , i);
            }
        }
        return count;
    }
    public void bfs(List<List<Integer>> adj, boolean vis[], int i){
    Queue<Integer> queue = new LinkedList<>();
    queue.add(i);
    vis[i] = true;

    while(!queue.isEmpty()){
        int node = queue.poll();
        for(int j = 0; j < adj.get(node).size(); j++){
            int neigh = adj.get(node).get(j);
            if(!vis[neigh]){
                vis[neigh] = true;
                queue.add(neigh);
            }
        }
    }
}

}