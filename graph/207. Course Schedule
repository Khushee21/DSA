There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites 
where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is 
impossible.
 

Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.


-----------------------------------------------------------------------------------------------------------------------------------

SOLUTION----


class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        int n=prerequisites.length;
        for(int i=0 ;i<numCourses ;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0 ;i<n ;i++){
            int u=prerequisites[i][0];
            int v=prerequisites[i][1];
            adj.get(u).add(v);
        }
        boolean[] visited = new boolean[numCourses];
        boolean[] recStack = new boolean[numCourses];

        for(int i=0 ;i<numCourses ;i++){
               if( dfs(i , visited , adj  , recStack)) {
                return false;
               }
        }
        return true;
    }
    public boolean dfs(int node , boolean visited[] , ArrayList<ArrayList<Integer>> adj , boolean[] recStack ){
        visited[node]=true;
        recStack[node]=true;
        for(int i=0 ;i<adj.get(node).size() ;i++){
            int k=adj.get(node).get(i);
                if (!visited[k]) {
                    if (dfs(k, visited, adj ,  recStack)) {
                        return true;
                    }
                }
                else if(recStack[k]) {
                    return true;
                }
        }
        recStack[node] = false;
        return false;
    }
}