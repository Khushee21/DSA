Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit
 integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 
Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1

-----------------------------------------------------------------------------------------------------------------------------------

SOLUTION  1.

-----------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int reverse(int x) {
        int res=0;
        boolean isNegative = x<0 ;
        String str = String.valueOf(Math.abs(x));
        StringBuilder sb=new StringBuilder(str).reverse();
        try{
            res=Integer.parseInt(sb.toString());
        }
        catch(NumberFormatException e){
            return 0;
        }
        return isNegative ? -res : res ; 
    }
}

----------------------------------------------------------------------------------------------------------------------------------

SOLUTION 2.

----------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int reverse(int x) {

        long  rev = 0;
        long  ld = 0;
        while(x!=0){
            ld = x%10;
            rev=rev*10+ld;
            x/=10;
        }
        if(rev>=Integer.MAX_VALUE || rev<=Integer.MIN_VALUE) return 0;
      return (int)rev;
    }
}

