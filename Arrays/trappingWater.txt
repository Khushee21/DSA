Given a number k and string s of digits denoting a positive integer, build the largest number possible by performing swap operations on the digits of s at most k times.

Examples :

Input: s = "1234567", k = 4
Output: 7654321
Explanation: Three swaps can make the input 1234567 to 7654321, swapping 1 with 7, 2 with 6 and finally 3 with 5.
Input: s = "3435335", k = 3
Output: 5543333
Explanation: Three swaps can make the input 3435335 to 5543333, swapping 3 with 5, 4 with 5 and finally 3 with 4.
Input: s = "1034", k = 2
Output: 4301
Explanation: Two swaps can make the input 1034 to 4301, swapping 1 with 4 and finally 0 with 3. 
Constraints:
1 ≤ s.size() ≤ 15
1 ≤ k ≤ 7

------------------------------------------------------------------------------------------------------------------------------------------------------------------------



class Solution {
    public int maxWater(int arr[]) {
        int max=arr[0];
        int pre[]=new int[arr.length];
        int post[]=new int[arr.length];
        pre[0]=0;
       for(int i=1 ;i<arr.length ;i++){
           if(arr[i]>max){
               max=arr[i];
           }
           pre[i]=max-arr[i];
       }
       pre[arr.length-1]=0;
       max=arr[arr.length-1];
       for(int i=arr.length-2 ;i>=0 ;i--){
           if(arr[i]>max){
               max=arr[i];
           }
           post[i]=max-arr[i];
       }
       for(int i=0 ;i<arr.length ;i++){
           pre[i]=Math.min(pre[i] , post[i]);
       }
       int sum=0;
       for(int i=0 ;i<arr.length ;i++){
           sum+=pre[i];
       }
       return sum;
    }
}
