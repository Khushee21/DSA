LINK- https://leetcode.com/problems/permutations/description/

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

-----------------------------------------------------------------------------------------------------------------------------

SOLUTION__________________


class Solution {
    public List<List<Integer>> permute(int[] arr) {
        List<List<Integer>> result=new ArrayList<>();
       Arrays.sort(arr);
       boolean vis[]=new boolean[arr.length];
       helper(vis , arr , result , new ArrayList<>() );
       return result;
    }
    public static void helper(boolean vis[] , int arr[] , List<List<Integer>> result , ArrayList<Integer> curr){
        if (curr.size() == arr.length) {
            result.add(new ArrayList<>(curr));
            return;
        }
        for(int idx=0 ;idx<arr.length ;idx++){
            if(vis[idx]) continue;
            
            if(idx>0 && arr[idx]==arr[idx-1]  && !vis[idx-1]) continue;
            curr.add(arr[idx]);
            vis[idx]=true;
            
            helper(vis , arr , result , curr);
            
            vis[idx]=false;
            curr.remove(curr.size()-1);
        }
    }
}